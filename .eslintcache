[{"F:\\projects\\Flood-It\\src\\index.tsx":"1","F:\\projects\\Flood-It\\src\\components\\Game\\index.tsx":"2","F:\\projects\\Flood-It\\src\\actions\\restartGame.ts":"3","F:\\projects\\Flood-It\\src\\actions\\makeMove.ts":"4","F:\\projects\\Flood-It\\src\\components\\Board\\index.tsx":"5","F:\\projects\\Flood-It\\src\\actions\\initialState.ts":"6","F:\\projects\\Flood-It\\src\\actions\\createBoard.ts":"7","F:\\projects\\Flood-It\\src\\components\\TopMenu\\index.tsx":"8","F:\\projects\\Flood-It\\src\\components\\ColorSelector\\index.tsx":"9","F:\\projects\\Flood-It\\src\\components\\Settings\\index.tsx":"10","F:\\projects\\Flood-It\\src\\components\\Winnersplash\\index.tsx":"11","F:\\projects\\Flood-It\\src\\components\\Button\\index.tsx":"12","F:\\projects\\Flood-It\\src\\components\\ColorButton\\index.tsx":"13","F:\\projects\\Flood-It\\src\\components\\Tile\\index.tsx":"14"},{"size":182,"mtime":1610483484355,"results":"15","hashOfConfig":"16"},{"size":2055,"mtime":1610485403351,"results":"17","hashOfConfig":"16"},{"size":594,"mtime":1610484715744,"results":"18","hashOfConfig":"16"},{"size":1560,"mtime":1610484713026,"results":"19","hashOfConfig":"16"},{"size":945,"mtime":1610484946285,"results":"20","hashOfConfig":"16"},{"size":505,"mtime":1610477997038,"results":"21","hashOfConfig":"16"},{"size":523,"mtime":1610483331640,"results":"22","hashOfConfig":"16"},{"size":1084,"mtime":1610480554924,"results":"23","hashOfConfig":"16"},{"size":793,"mtime":1610484973312,"results":"24","hashOfConfig":"16"},{"size":3231,"mtime":1610551351448,"results":"25","hashOfConfig":"16"},{"size":693,"mtime":1610483867503,"results":"26","hashOfConfig":"16"},{"size":424,"mtime":1610478888873,"results":"27","hashOfConfig":"16"},{"size":745,"mtime":1610481050018,"results":"28","hashOfConfig":"16"},{"size":250,"mtime":1610480803286,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"53jiqt",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"F:\\projects\\Flood-It\\src\\index.tsx",[],[],"F:\\projects\\Flood-It\\src\\components\\Game\\index.tsx",[],"F:\\projects\\Flood-It\\src\\actions\\restartGame.ts",[],"F:\\projects\\Flood-It\\src\\actions\\makeMove.ts",["62"],"import GameState from \"../models/GameState\"\r\n\r\nconst makeMove = (color:number, state:GameState) => {\r\n  const newState = { ...state }\r\n  const board = newState.board\r\n\r\n  for (let r = 0; r < board.length; r++) {\r\n    for (let t = 0; t < board[r].length; t++) {\r\n      if (board[r][t].collected === true) {\r\n        if (t - 1 >= 0) {\r\n          if (board[r][t - 1].color === color)\r\n            board[r][t - 1].collected = true\r\n        }\r\n        if (t + 1 < board[r].length) {\r\n          if (board[r][t + 1].color === color)\r\n            board[r][t + 1].collected = true\r\n        }\r\n\r\n        if (r + 1 < board.length) {\r\n          if (board[r + 1][t].color === color)\r\n            board[r + 1][t].collected = true\r\n        }\r\n        if (r - 1 >= 0) {\r\n          if (board[r - 1][t].color === color) {\r\n            if (board[r - 1][t].collected !== true) {\r\n              board[r - 1][t].collected = true\r\n              r = r > 1 ? r - 2 : 0\r\n              break\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  board.map((r) => r.map((l) => l.color = l.collected === true ? color : l.color))\r\n\r\n  newState.gameCondition = \"won\"\r\n  for (let r = 0; r < board.length; r++) {\r\n    for (let t = 0; t < board[r].length; t++) {\r\n      if (board[r][t].collected === false) {\r\n        newState.gameCondition = 'running'\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  newState.turn++\r\n  if (newState.turn >= newState.maxTurns && newState.gameCondition === 'running')\r\n    newState.gameCondition = 'lost'\r\n\r\n\r\n  return newState;\r\n}\r\n\r\nexport default makeMove ","F:\\projects\\Flood-It\\src\\components\\Board\\index.tsx",[],"F:\\projects\\Flood-It\\src\\actions\\initialState.ts",[],"F:\\projects\\Flood-It\\src\\actions\\createBoard.ts",[],"F:\\projects\\Flood-It\\src\\components\\TopMenu\\index.tsx",[],"F:\\projects\\Flood-It\\src\\components\\ColorSelector\\index.tsx",[],"F:\\projects\\Flood-It\\src\\components\\Settings\\index.tsx",[],"F:\\projects\\Flood-It\\src\\components\\Winnersplash\\index.tsx",[],"F:\\projects\\Flood-It\\src\\components\\Button\\index.tsx",["63"],"import { FC } from 'react';\r\nimport './button.css';\r\n\r\ntype ButtonProps = {\r\n    click: () => void;\r\n    text: string;\r\n    toggle?: boolean;\r\n    style?: any;\r\n};\r\n\r\nconst Button: FC<ButtonProps> = ({ click, text, toggle, style }) => {\r\n    return (\r\n        <div className={`button ${toggle ? 'buttonToggle' : ''}`} onClick={click} style={style}>\r\n            {text}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","F:\\projects\\Flood-It\\src\\components\\ColorButton\\index.tsx",["64"],"import { FC } from 'react';\r\nimport './colorButton.css';\r\nimport Tile from '../Tile';\r\n\r\ntype ColorButtonProps = {\r\n    onClick: () => void;\r\n    text: string;\r\n    colors: string[];\r\n    toggle?: boolean;\r\n    style?: any;\r\n};\r\n\r\nconst ColorButton: FC<ColorButtonProps> = ({ onClick, text, toggle, style, colors }) => {\r\n    return (\r\n        <div\r\n            className={`colorButton ${toggle ? 'colorButtonToggle' : ''}`}\r\n            onClick={onClick}\r\n            style={style}\r\n        >\r\n            {text}\r\n            <ul className=\"colors\">\r\n                {colors.map((c) => {\r\n                    return <Tile color={c} key={c} />;\r\n                })}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ColorButton;\r\n","F:\\projects\\Flood-It\\src\\components\\Tile\\index.tsx",[],{"ruleId":"65","severity":1,"message":"66","line":3,"column":18,"nodeType":"67","messageId":"68","endLine":3,"endColumn":52},{"ruleId":"69","severity":1,"message":"70","line":8,"column":13,"nodeType":"71","messageId":"72","endLine":8,"endColumn":16,"suggestions":"73"},{"ruleId":"69","severity":1,"message":"70","line":10,"column":13,"nodeType":"71","messageId":"72","endLine":10,"endColumn":16,"suggestions":"74"},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["75","76"],["77","78"],{"messageId":"79","fix":"80","desc":"81"},{"messageId":"82","fix":"83","desc":"84"},{"messageId":"79","fix":"85","desc":"81"},{"messageId":"82","fix":"86","desc":"84"},"suggestUnknown",{"range":"87","text":"88"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"87","text":"89"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"90","text":"88"},{"range":"90","text":"89"},[155,158],"unknown","never",[219,222]]